// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/config.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.mylogic.dev/homelab/go-arcs/api/gen/proto/go/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigManagerName is the fully-qualified name of the ConfigManager service.
	ConfigManagerName = "server.v1.ConfigManager"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigManagerListConfigsProcedure is the fully-qualified name of the ConfigManager's ListConfigs
	// RPC.
	ConfigManagerListConfigsProcedure = "/server.v1.ConfigManager/ListConfigs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	configManagerServiceDescriptor           = v1.File_server_v1_config_proto.Services().ByName("ConfigManager")
	configManagerListConfigsMethodDescriptor = configManagerServiceDescriptor.Methods().ByName("ListConfigs")
)

// ConfigManagerClient is a client for the server.v1.ConfigManager service.
type ConfigManagerClient interface {
	ListConfigs(context.Context, *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
}

// NewConfigManagerClient constructs a client for the server.v1.ConfigManager service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigManagerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigManagerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configManagerClient{
		listConfigs: connect.NewClient[v1.ListConfigRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+ConfigManagerListConfigsProcedure,
			connect.WithSchema(configManagerListConfigsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// configManagerClient implements ConfigManagerClient.
type configManagerClient struct {
	listConfigs *connect.Client[v1.ListConfigRequest, v1.GetConfigResponse]
}

// ListConfigs calls server.v1.ConfigManager.ListConfigs.
func (c *configManagerClient) ListConfigs(ctx context.Context, req *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.listConfigs.CallUnary(ctx, req)
}

// ConfigManagerHandler is an implementation of the server.v1.ConfigManager service.
type ConfigManagerHandler interface {
	ListConfigs(context.Context, *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
}

// NewConfigManagerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigManagerHandler(svc ConfigManagerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configManagerListConfigsHandler := connect.NewUnaryHandler(
		ConfigManagerListConfigsProcedure,
		svc.ListConfigs,
		connect.WithSchema(configManagerListConfigsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.v1.ConfigManager/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigManagerListConfigsProcedure:
			configManagerListConfigsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigManagerHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigManagerHandler struct{}

func (UnimplementedConfigManagerHandler) ListConfigs(context.Context, *connect.Request[v1.ListConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.ConfigManager.ListConfigs is not implemented"))
}
