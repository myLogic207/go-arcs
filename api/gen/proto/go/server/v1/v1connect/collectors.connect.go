// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/collectors.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.mylogic.dev/homelab/go-arcs/api/gen/proto/go/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CollectorManagerName is the fully-qualified name of the CollectorManager service.
	CollectorManagerName = "server.v1.CollectorManager"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CollectorManagerListCollectorsProcedure is the fully-qualified name of the CollectorManager's
	// ListCollectors RPC.
	CollectorManagerListCollectorsProcedure = "/server.v1.CollectorManager/ListCollectors"
	// CollectorManagerGetCollectorProcedure is the fully-qualified name of the CollectorManager's
	// GetCollector RPC.
	CollectorManagerGetCollectorProcedure = "/server.v1.CollectorManager/GetCollector"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	collectorManagerServiceDescriptor              = v1.File_server_v1_collectors_proto.Services().ByName("CollectorManager")
	collectorManagerListCollectorsMethodDescriptor = collectorManagerServiceDescriptor.Methods().ByName("ListCollectors")
	collectorManagerGetCollectorMethodDescriptor   = collectorManagerServiceDescriptor.Methods().ByName("GetCollector")
)

// CollectorManagerClient is a client for the server.v1.CollectorManager service.
type CollectorManagerClient interface {
	// GetConfig returns the collector's configuration.
	ListCollectors(context.Context, *connect.Request[v1.GetListRequest]) (*connect.ServerStreamForClient[v1.GetCollectorsResponse], error)
	// GetConfig returns the collector's configuration.
	GetCollector(context.Context, *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.GetConfigResponse], error)
}

// NewCollectorManagerClient constructs a client for the server.v1.CollectorManager service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCollectorManagerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CollectorManagerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &collectorManagerClient{
		listCollectors: connect.NewClient[v1.GetListRequest, v1.GetCollectorsResponse](
			httpClient,
			baseURL+CollectorManagerListCollectorsProcedure,
			connect.WithSchema(collectorManagerListCollectorsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getCollector: connect.NewClient[v1.GetCollectorRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+CollectorManagerGetCollectorProcedure,
			connect.WithSchema(collectorManagerGetCollectorMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// collectorManagerClient implements CollectorManagerClient.
type collectorManagerClient struct {
	listCollectors *connect.Client[v1.GetListRequest, v1.GetCollectorsResponse]
	getCollector   *connect.Client[v1.GetCollectorRequest, v1.GetConfigResponse]
}

// ListCollectors calls server.v1.CollectorManager.ListCollectors.
func (c *collectorManagerClient) ListCollectors(ctx context.Context, req *connect.Request[v1.GetListRequest]) (*connect.ServerStreamForClient[v1.GetCollectorsResponse], error) {
	return c.listCollectors.CallServerStream(ctx, req)
}

// GetCollector calls server.v1.CollectorManager.GetCollector.
func (c *collectorManagerClient) GetCollector(ctx context.Context, req *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.getCollector.CallUnary(ctx, req)
}

// CollectorManagerHandler is an implementation of the server.v1.CollectorManager service.
type CollectorManagerHandler interface {
	// GetConfig returns the collector's configuration.
	ListCollectors(context.Context, *connect.Request[v1.GetListRequest], *connect.ServerStream[v1.GetCollectorsResponse]) error
	// GetConfig returns the collector's configuration.
	GetCollector(context.Context, *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.GetConfigResponse], error)
}

// NewCollectorManagerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCollectorManagerHandler(svc CollectorManagerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	collectorManagerListCollectorsHandler := connect.NewServerStreamHandler(
		CollectorManagerListCollectorsProcedure,
		svc.ListCollectors,
		connect.WithSchema(collectorManagerListCollectorsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	collectorManagerGetCollectorHandler := connect.NewUnaryHandler(
		CollectorManagerGetCollectorProcedure,
		svc.GetCollector,
		connect.WithSchema(collectorManagerGetCollectorMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.v1.CollectorManager/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CollectorManagerListCollectorsProcedure:
			collectorManagerListCollectorsHandler.ServeHTTP(w, r)
		case CollectorManagerGetCollectorProcedure:
			collectorManagerGetCollectorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCollectorManagerHandler returns CodeUnimplemented from all methods.
type UnimplementedCollectorManagerHandler struct{}

func (UnimplementedCollectorManagerHandler) ListCollectors(context.Context, *connect.Request[v1.GetListRequest], *connect.ServerStream[v1.GetCollectorsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.CollectorManager.ListCollectors is not implemented"))
}

func (UnimplementedCollectorManagerHandler) GetCollector(context.Context, *connect.Request[v1.GetCollectorRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.CollectorManager.GetCollector is not implemented"))
}
